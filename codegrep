#!/usr/bin/env python
#
# Copyright (C) 2016 Mattia Basaglia
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import argparse
import re
import string
import magic

# Similar to grep but it gives proper context:
# if the matching line is indented: print before/after with same indentation
# if the last printed line ends with \ include the following
# if a printed line has unmatched  [({ make sure to get up to the matching ])}
# everything is to be limited by maximum context size
# Options to interpret comments/string


class CommentContext(object):
    """
    Provides information on how to interpret comments.
    Here a comment is anything that should not be parsed as a single unit
    instead as a series of language tokens
    """
    def __init__(self, begin, end=None, multiline=True, ignores=None):
        self.begin = begin
        self.end = end if end is not None else begin
        self.multiline = multiline or end == "\n"
        self.ignores = ignores


class BracketContext(object):
    """
    Provides information on how to match brackets
    """
    def __init__(self, open, close):
        self.open = open
        self.close = close


class Language(object):
    """
    Contains parsing information
    """
    def __init__(self, name,
                 file_extensions=[], mime_types=[],
                 comments=[], brackets=[]):
        self.name = name
        self.file_extensions = file_extensions
        self.mime_types = mime_types
        self.comments = comments
        self.brackets = brackets

    def bracket_counter(self):
        """
        Returns a dictionary that can be used to store bracket counts
        """
        return {bracket.open: 0 for bracket in self.brackets}

    def bracket_deltas(self):
        """
        Returns a dictionary that simplifies bracket counting
        """
        deltas = {}
        for bracket in self.brackets:
            deltas[bracket.open] = (bracket.open, +1)
            deltas[bracket.close] = (bracket.open, -1)
        return deltas


class LineMatch(object):
    """
    Object representing a match
    """

    def __init__(self, match, index, src_file):
        # Line index of the beginning of the context
        self.context_begin = index
        # Line index of the beginning of the context
        self.context_end = index
        # Matched line index
        self.index = index
        # Index in src_file.lines[index] of the beginning of the match
        self.match_begin = match.start()
        # Index in src_file.lines[lines] line of the end of the match
        self.match_end = match.end()
        # Source file
        self.file = src_file

    def expand(self, prev):
        """
        Expands the context for this match, possibly contracting it for prev
        """
        match_line = self.file.lines[self.index]
        last_space = 0
        while last_space < len(match_line.src) and match_line.src[last_space].isspace():
            last_space += 1
        self.indent = match_line.src[:last_space]

        self._brackets = self.file.language.bracket_deltas()

        # Check whether it should be merged with the previous match
        min = 0
        if prev is not None:
            if self.index <= prev.context_end + 1:
                self.context_end = max(prev.context_end, self.index)
                prev.context_end = max(self.index - 1, prev.index)
                return
            min = prev.context_end

        self._expand_back(min)
        self._expand_front()

    def _expand_back(self, min):
        """
        Expands the context before the match
        """

        brackets = self.file.language.bracket_counter()

        index = self.index - 1
        while index >= min and self._match_indent(index):
            self._parse_line(self.file.lines[index], brackets)
            index -= 1

        while index >= min and (
                any(brackets.values()) or
                self._comment_continue_back(index)
            ):
            self._parse_line(self.file.lines[index], brackets)
            index -= 1

        self.context_begin = index + 1

    def _expand_front(self):
        """
        Expands the context after the match
        """

        brackets = self.file.language.bracket_counter()

        self._parse_line(self.file.lines[self.index], brackets)
        index = self.index + 1
        while index < len(self.file.lines) and self._match_indent(index):
            self._parse_line(self.file.lines[index], brackets)
            index += 1

        while index < len(self.file.lines) and (
                any(brackets.values()) or
                self._comment_continue_front(index)
            ):
            self._parse_line(self.file.lines[index], brackets)
            index += 1

        self.context_end = index - 1

    def _comment_continue_front(self, index):
        chunks = self.file.lines[index].chunks
        return chunks and (
            chunks[0].type == SourceLine.CHUNK_COMMENT_CONT or
            chunks[0].type == SourceLine.CHUNK_COMMENT_END
        )

    def _comment_continue_back(self, index):
        chunks = self.file.lines[index].chunks
        return chunks and (
            chunks[-1].type == SourceLine.CHUNK_COMMENT_CONT or
            chunks[-1].type == SourceLine.CHUNK_COMMENT_START
        )

    def _match_indent(self, index):
        """
        Checks if the line at the given index matches the indentation
        extracted from the line matching the search pattern
        """
        return self.file.lines[index].src.startswith(self.indent) and (
            len(self.file.lines[index].src) == len(self.indent) or
            not self.file.lines[index].src[len(self.indent)].isspace()
        )

    def _parse_line(self, line, counter):
        """
        Add/subtract from the bracket counters
        """
        for chunk in line.chunks:
            if chunk.type == SourceLine.CHUNK_TEXT:
                counts = count_chars(line.chunk(chunk), self._brackets.keys())

                for char, info in self._brackets.iteritems():
                    counter[info[0]] += info[1]*counts[char]

    def print_match(self, formatter):
        """
        Prints thjs match
        """
        if self.context_begin < self.index:
            for line in range(self.context_begin, self.index):
                formatter.print_line(line, self.file)

        formatter.print_match_line(self.index,
                                   self.match_begin, self.match_end,
                                   self.file)

        if self.context_end > self.index:
            for line in range(self.index+1, self.context_end+1):
                formatter.print_line(line, self.file)


class SourceLine(object):
    CHUNK_TEXT           = 0
    CHUNK_COMMENT_START  = 1
    CHUNK_COMMENT_CONT   = 2
    CHUNK_COMMENT_END    = 3
    CHUNK_COMMENT_SIMPLE = 4

    class Chunk(object):
        def __init__(self, begin, end, type):
            self.begin = begin
            self.end = end
            self.type = type

    def __init__(self, line):
        self.src = line
        self.chunks = []

    def chunk(self, chunk):
        """
        Returns the substring corresponding to the chunk
        """
        return self.src[chunk.begin:chunk.end]

    def add_chunk(self, begin, end, type):
        if end == -1:
            end = len(self.src)
        self.chunks.append(SourceLine.Chunk(begin, end, type))

    def chunk_at(self, pos):
        """
        Returns the chunk containing the character with the given index
        """
        for chunk in self.chunks:
            if chunk.begin <= pos and chunk.end >= pos:
                return chunk
        raise IndexError("Position out of range")


class SourceFile(object):
    @staticmethod
    def _open_magic():
        magic_obj = magic.open(magic.ERROR | magic.MIME_TYPE)
        magic_obj.load()
        return magic_obj

    languages = {}
    _magic = _open_magic.__func__()

    def __init__(self, file, language):
        self.file = file

        pos = file.tell()
        self.lines = []
        raw_lines = list(file)
        if file is not sys.stdin:
            file.seek(pos)

        self.name = file.name

        if not language:
            self.language = self._detect_language()
        else:
            self.language = language

        self._split_lines(raw_lines)

    def _detect_language(self):
        """
        Returns a Language object based on the file and the global languages list
        """
        if self.file is not sys.stdin:
            mime = SourceFile._magic.descriptor(self.file.fileno())
        elif self.lines:
            mime = SourceFile._magic.buffer(self.lines[0].src)
        else:
            mime = None

        if mime:
            for lang in SourceFile.languages.values():
                if mime in lang.mime_types:
                    return lang

        for lang in SourceFile.languages.values():
            for ext in lang.file_extensions:
                if file.name.endswith(ext):
                    return lang
        raise Exception("Unknown language")

    def search(self, pattern):
        """
        Search file for pattern
        """
        if is_binary_file(self.file):
            return []

        matches = []
        for index, line in enumerate(self.lines):
            re_match = pattern.match(line)
            if re_match:
                line_match = LineMatch(re_match, index, self)
                line_match.expand(matches[-1] if matches else None)
                matches.append(line_match)

        return matches

    def _split_lines(self, raw_lines):
        """
        Splits the raw source lines into comment chunks, populating self.lines
        """
        context = None
        for raw_line in raw_lines:
            line = SourceLine(raw_line)
            self.lines.append(line)
            context = self._split_line(line, context)

    def _find_comment_end(self, line, chunk_start, context):
        """
        Finds the end of a comment in line, starting from chunk_start.
        Returns the index in line after the end of the comment (-1 if not found)
        """
        if not context:
            return -1

        while chunk_start < len(line.src):
            chunk_end = line.src.find(context.end, chunk_start)
            if chunk_end == -1:
                return -1

            chunk_end += len(context.end)
            chunk_start = chunk_end

            if context.ignores:
                ignore_end = line.src.find(context.ignores, chunk_start)
                if ignore_end < chunk_end and \
                        ignore_end + len(context.ignores) >= chunk_end:
                    continue

            return chunk_end

        return -1

    def _find_comment_begin(self, line, chunk_start):
        """
        Finds the beginning of a comment in line, starting from chunk_start.
        Returns a pair with the index in line of the start of the comment
        and the comment context that matched it.
        Returns (-1, None) if not found.
        """
        results = [
            (pos, comment) for pos, comment in
            (
                (line.src.find(comment.begin, chunk_start), comment)
                for comment in self.language.comments
            )
            if pos != -1
        ]

        if not results:
            return (-1, None)

        return min(results, key=lambda pair: (pair[0], -len(pair[1].begin)))

    def _split_line(self, line, context):
        """
        Splits a line into chunks
        Returns a comment context object if there is an unfinished multi-line
        comment (None otherwise).
        """

        chunk_start = 0

        if context:
            chunk_start = self._find_comment_end(line, 0, context)
            if chunk_start == -1:
                line.add_chunk(0, chunk_start, SourceLine.CHUNK_COMMENT_CONT)
                return context
            line.add_chunk(0, chunk_start, SourceLine.CHUNK_COMMENT_END)

        while chunk_start < len(line.src):
            chunk_end, comment = self._find_comment_begin(line, chunk_start)

            if comment:
                line.add_chunk(chunk_start, chunk_end, SourceLine.CHUNK_TEXT)
                chunk_start = chunk_end
                chunk_end = self._find_comment_end(
                    line,
                    chunk_start + len(comment.begin),
                    comment
                )
                if chunk_end == -1:
                    if comment.multiline:
                        line.add_chunk(chunk_start, chunk_end,
                                       SourceLine.CHUNK_COMMENT_START)
                        return comment
                    return None

                line.add_chunk(chunk_start, chunk_end,
                               SourceLine.CHUNK_COMMENT_SIMPLE)
                chunk_start = chunk_end
            else:
                line.add_chunk(chunk_start, len(line.src),
                               SourceLine.CHUNK_TEXT)
                return None

        return None


class Formatter(string.Formatter):
    """
    String formatter with special formatting flags and specialized funtions
    to print search matches
    """
    class Format:
        """
        Placeholder for formatting flags
        """
        pass

    _colors = {
        "black":   0,
        "red":     1,
        "green":   2,
        "yellow":  3,
        "blue":    4,
        "magenta": 5,
        "cyan":    6,
        "white":   7
    }

    _flags = {
        "bold":      1,
        "italic":    3,
        "underline": 4,
    }

    def __init__(self, color):
        self.color = color
        self.fmt_filename = "{fmt:green}{filename}{fmt} ({language})"
        self.fmt_line_prefix = "{fmt:bright_yellow}{line_num}{fmt}:"
        self.fmt_line_match = \
            "{prefix}{pre_match}{fmt:bright_red,bold}{match}{fmt}{post_match}"
        self.fmt_line_context = "{prefix}{line}"
        self.fmt_line_skipped = "{fmt:bright_magenta}---{fmt}"

    def print_filename(self, file):
        """
        Prints the filename as a match group
        """
        if self.fmt_filename:
            print self.format(
                self.fmt_filename,
                filename=file.name,
                language=file.language.name
            )

    def match_prefix(self, line_number, file):
        """
        Returns the prefix for a match/context line
        """
        return self.format(
            self.fmt_line_prefix,
            line_num=line_number,
            filename=file.name
        )

    def print_line(self, line_number, file):
        """
        Prints a line from the current file
        """
        sys.stdout.write(self.format(
            self.fmt_line_context,
            prefix=self.match_prefix(line_number, file),
            line=file.lines[line_number].src
        ))

    def print_match_line(self, line_number, match_begin, match_end, file):
        """
        Prints a line containing a match
        """
        line = file.lines[line_number].src
        sys.stdout.write(self.format(
            self.fmt_line_match,
            prefix=self.match_prefix(line_number, file),
            pre_match=line[:match_begin],
            match=line[match_begin:match_end],
            post_match=line[match_end:],
        ))

    def print_separator(self, line_from, line_to):
        """
        Prints a separator which delimits two sets of lines from the same file
        """
        if self.fmt_line_skipped:
            print self.format(
                self.fmt_line_skipped,
                line_from=line_from,
                line_to=line_to
            )

    def get_value(self, key, args, kwargs):
        """
        string.Formatter override, converts "fmt" into placeholders
        """
        if key == "fmt":
            return Formatter.Format()
        return super(Formatter, self).get_value(key, args, kwargs)

    def format_field(self, value, format_spec):
        """
        string.Formatter override, handles normal replacements as usual
        and formats the placeholders
        """
        if isinstance(value, Formatter.Format):
            return self.format_color(format_spec.split(","))
        return super(Formatter, self).format_field(value, format_spec)

    def format_color(self, format_list):
        """
        Returns a string that will produce the right color from a list
        of human-readable format flags
        """
        if not self.color:
            return ""

        codes = []

        for fmt in format_list:
            if not fmt:
                pass
            elif len(fmt) == 1 and fmt.isdigit():
                codes += [30+int(fmt)]
            elif fmt == "r" or fmt == "regular":
                codes += [22]
            elif fmt == "clear":
                codes = [0]
            elif fmt == "^*":
                codes += [39]
            elif len(fmt) == 2 and fmt[0] == "^" and fmt[1].isdigit():
                codes += [30+int(fmt[1])]
            elif fmt in Formatter._colors:
                codes += [30+Formatter._colors[fmt]]
            elif fmt.startswith("bright_") and fmt[7:] in Formatter._colors:
                codes += [90+Formatter._colors[fmt[7:]]]
            else:
                self._ansi_append(
                    self._ansi_flag_from_name(fmt),
                    codes
                )

        if codes:
            return "\x1b[%sm" % ";".join(map(str, codes))

        return "\x1b[0m"

    def _ansi_flag_negate(self, flag):
        """
        Returns an ansi formatting code that has the effect of cancelling the
        one passed as an argument
        """
        if flag == 1:
            return 24
        elif flag < 10:
            return 20+flag
        elif flag >= 30 and flag < 39:
            return 39
        elif flag >= 30 and flag < 39:
            return 39
        else:
            return flag

    def _ansi_flag_from_name(self, name):
        """
        Turns a human-readable name into an ansi formatting flag
        """
        if len(name) == 1:
            flag = next((
                flag
                for name, flag in Formatter._flags.iteritems()
                if name.startswith(name.lower)),
                None)
            if name.isupper():
                return self._ansi_flag_negate(flag)
            return flag

        if name in Formatter._flags:
            return Formatter._flags[name]

        if name.startswith("not_"):
            return self._ansi_flag_negate(self._ansi_flag_from_name(name[4:]))

        return None

    def _ansi_append(self, flag, list):
        """
        Appends the result of _ansi_flag_from_name to a list of flags
        """
        if flag is not None:
            list.append(flag)


def count_chars(string, chars=None):
    counts = [0 for _ in range(0, 128)]
    for char in string:
        counts[ord(char)] += 1

    if chars:
        return {ch: counts[ord(ch)] for ch in chars}

    return {
        chr(index): count
        for index, count in enumerate(counts)
        if count > 0
    }


def search_file(file_obj, pattern, formatter, language):
    src_file = SourceFile(file_obj, language)
    format_matches(src_file, src_file.search(pattern), formatter)


def format_matches(file, matches, formatter):
    """
    Prints the result of file.search()
    """
    if not matches:
        return

    formatter.print_filename(file)
    previous_end = 0
    for match in matches:
        if previous_end and match.context_begin - 1 > previous_end + 1:
            formatter.print_separator(previous_end + 1, match.context_begin - 1)
        elif match.context_begin == previous_end + 2:
            formatter.print_line(previous_end + 1, file)
        match.print_match(formatter)
        previous_end = match.context_end


def is_binary_file(file, maxread=1024, threshold=0.3):
    """
    Whether a file is to be considered binary (instead of text)

    It reads the context of the given file objects and estimates whether it
    should be regarded as binary data.
    """

    # Assume the user knows what is typing/piping
    if file is sys.stdin:
        return False

    pos = file.tell()
    checked = file.read(maxread)
    file.seek(pos)

    # Empty file
    if not checked:
        return False

    no_ascii = 0
    for char in checked:
        if ord(char) == 0:
            return True
        if ord(char) > 127:
            no_ascii += 1

    return float(no_ascii) / len(checked) > threshold


def search_recurse(filename, pattern, formatter, language):
    """
    If filename is a directory, recurse else open and call search_file
    """
    if os.path.isdir(filename):
        for child in os.listdir(filename):
            search_recurse(
                os.path.join(filename, child), pattern, formatter, language
            )
    else:
        with open(filename) as file:
            search_file(file, pattern, formatter, language)


class Pattern(object):
    """
    A search pattern
    """
    def __init__(self, pattern, regex, re_flags=0, skip_comments=False):
        if not regex:
            pattern = re.escape(pattern)
        self.pattern = re.compile(pattern, re_flags)
        self.skip_comments = skip_comments

    def match(self, line):
        """
        Searches for a match in the given line
        """
        if not self.skip_comments:
            return self.pattern.search(line.src)
        for chunk in line.chunks:
            if chunk.type == SourceLine.CHUNK_TEXT:
                match = self.pattern.search(line.src, chunk.begin, chunk.end)
                if match:
                    return match
        return None


def args_any_of(*args):
    """
    Whether any of the function arguments is present as a command line argument
    """
    return any(x in sys.argv for x in args)


def args_none_of(*args):
    """
    Whether none of the function arguments is present as a command line argument
    """
    return all(x not in sys.argv for x in args)


def parse_args():
    arg_parser = argparse.ArgumentParser(
        description="Code Grep.",
        add_help=False
    )

    arg_parser.add_argument(
        "--help", "-?",
        action="help",
        help="Print this help message and exit."
    )

    arg_parser.add_argument(
        "-F",
        help="Fixed string pattern.",
        action="store_const",
        default="extended",
        const="fixed",
        dest="syntax",
    )
    arg_parser.add_argument(
        "-E",
        help="Extended regex pattern.",
        action="store_const",
        const="extended",
        dest="syntax",
    )
    arg_parser.add_argument(
        "-r", "-R", "--recurse",
        help="Recurse in directories.",
        action="store_true",
        dest="recurse",
    )
    arg_parser.add_argument(
        "-i", "--ignore-case",
        help="Case-insensitive search.",
        action="store_true",
        dest="icase",
    )
    arg_parser.add_argument(
        "--color", "--colour",
        help="Colorize output.",
        choices=["auto", "always", "never"],
        dest="color",
        default="auto",
    )
    arg_parser.add_argument(
        "--with-filename", "-H",
        help="Print the filename for each match.",
        action="store_true",
        default=True,
    )
    arg_parser.add_argument(
        "--no-filename", "-h",
        help="Suppress filename and line number output.",
        action="store_false",
        dest="with_filename",
    )
    arg_parser.add_argument(
        "--group",
        help="Group matches by file name.",
        action="store_true",
        default=True,
    )
    arg_parser.add_argument(
        "--nogroup", "--no-group",
        help="Don't group matches by file name.",
        action="store_false",
        dest="group",
    )
    arg_parser.add_argument(
        "--skip-comments", "-c",
        help="Disregard matches that fall in comments or string literals.",
        action="store_true",
    )

    # TODO allow this: codegrep -l c++ file1 file2 -l py file3
    arg_parser.add_argument(
        "--lang", "-l",
        help="Language.",
        choices=SourceFile.languages.keys(),
        default=None,
    )

    if args_any_of("-e", "-f", "-?", "--help"):
        pattern_or_file = arg_parser.add_mutually_exclusive_group(required=True)
        pattern_or_file.add_argument(
            "-e",
            help="Search pattern.",
            dest="pattern",
            nargs=1
        )
        pattern_or_file.add_argument(
            "-f",
            help="File to search.",
            dest="files",
            nargs=1
        )
    if args_none_of(["-e", "-f"]):
        arg_parser.add_argument(
            "pattern",
            help="Search pattern.",
            nargs=1 if not args_any_of("-?", "--help") else '?'
        )
    arg_parser.add_argument(
        "files",
        help="Files to search.",
        nargs="*",
    )

    return arg_parser.parse_args()


std_brackets = [
    BracketContext('(', ')'),
    BracketContext('[', ']'),
    BracketContext('{', '}'),
]

SourceFile.languages = {
    "py": Language(
        "Python",
        [".py"],
        ["text/x-python"],
        [
            CommentContext('"""', ignores='\\"'),
            CommentContext("'''", ignores="\\'"),
            CommentContext('"', ignores='\\"', multiline=False),
            CommentContext("'", ignores="\\'", multiline=False),
            CommentContext("#", "\n"),
        ],
        std_brackets
    ),

    "c++": Language(
        "C, C++ and similar",
        [".h", ".hxx", ".hpp", ".hh", ".h++", ".H", ".tlh",
         ".cpp", ".cc", ".C", ".c++", ".cxx", ".ocl", ".inl", ".idl", ".c",
         ".m", ".mm", ".M", ".y", ".ypp", ".yxx", ".y++", ".l"],
        ["text/x-c", "text/x-c++", "text/x-c++hdr", "text/x-c++src",
         "text/x-chdr", "text/x-csrc", "text/x-objchdr", "text/x-objcsrc"],
        [
            CommentContext('R"(', ')"'),
            CommentContext('"', ignores='\\"'),
            CommentContext("'", ignores="\\'"),
            CommentContext("//", "\n"),
            CommentContext("/*", "*/"),
        ],
        std_brackets
    ),

    "xml": Language(
        "XML",
        [".xml", ".htm", ".html"],  # TODO: More fallback extensions?
        ["text/xml", "application/xml", "text/html"],
        [
            CommentContext("<!--", "-->"),
            CommentContext("<![CDATA[", "]]>"),
        ],
        std_brackets + [BracketContext('<', '>')],
    ),

    "txt": Language(
        "Plain text",
        [".txt", ""],
        ["text/plain"],
        brackets=std_brackets
    ),
}

args = parse_args()

if not args.pattern or not args.pattern[0]:
    sys.exit()

flags = 0
if args.icase:
    flags |= re.IGNORECASE

use_regex = args.syntax == "extended"
pattern = Pattern(args.pattern[0], use_regex, flags, args.skip_comments)

if args.color == "auto":
    color = sys.stdout.isatty()
else:
    color = args.color == "always"

formatter = Formatter(color)

if not args.with_filename:
    formatter.fmt_filename = ""
    formatter.fmt_line_prefix = ""
    formatter.fmt_line_skipped = ""
elif not args.group:
    formatter.fmt_line_prefix = "{fmt:green}{filename}{fmt}:" + \
                                formatter.fmt_line_prefix
    formatter.fmt_line_skipped = ""
    formatter.fmt_filename = ""

language = None
if args.lang:
    language = SourceFile.languages[args.lang]

if not args.files:
    search_file(sys.stdin, pattern, formatter, language)
elif args.recurse:
    for filename in args.files:
        search_recurse(filename, pattern, formatter, language)
else:
    for filename in args.files:
        with open(filename) as file:
            search_file(file, pattern, formatter, language)
